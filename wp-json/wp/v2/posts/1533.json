{"id":1533,"date":"2018-09-26T14:53:32","date_gmt":"2018-09-26T14:53:32","guid":{"rendered":"https:\/\/ostif.org\/?p=1533"},"modified":"2019-06-30T22:59:20","modified_gmt":"2019-06-30T22:59:20","slug":"our-review-of-the-openssl-1-1-1-random-number-generation-update","status":"publish","type":"post","link":"https:\/\/ostif.org\/our-review-of-the-openssl-1-1-1-random-number-generation-update\/","title":{"rendered":"Our Review of the OpenSSL 1.1.1 Random Number Generation Update"},"content":{"rendered":"<p>We have completed the security review of the new\u00a0<a href=\"https:\/\/en.wikipedia.org\/wiki\/Pseudorandom_number_generator\">Pseudorandom Number Generator (PRNG)<\/a>\u00a0for\u00a0<a href=\"https:\/\/www.openssl.org\/\">OpenSSL<\/a>1.1.1.<\/p>\n<p>This security review was sponsored by\u00a0<a href=\"https:\/\/privateinternetaccess.com\/\">Private Internet Access<\/a>,\u00a0<a href=\"https:\/\/expressvpn.com\/\">ExpressVPN<\/a>,\u00a0<a href=\"https:\/\/duckduckgo.com\/\">DuckDuckGo<\/a>,\u00a0<a href=\"https:\/\/openvpn.net\/\">OpenVPN<\/a>, and the privacy community.<\/p>\n<p>Random number generation is a crucial component in all cryptography, because the \u201crandomness\u201d of numbers is the mechanism that makes secret numbers hard to guess. Problems with number generation can lead to\u00a0<a href=\"https:\/\/en.wikipedia.org\/wiki\/Random_number_generator_attack\">serious consequences<\/a>. When we learned that OpenSSL is getting a shiny new PRNG, we decided that it was crucial that we focus on making sure that the new code is as safe and robust as possible.<\/p>\n<p>We had a team specifically review the new PRNG, which is also covered with a 2nd review by the cryptography review from QuarksLab. JP Aumasson and Antony Vennard carried out this component of our comprehensive review.<\/p>\n<p>A total of ten issues were raised to improve the performance and\/or randomness of the data created by the PRNG.<\/p>\n<p>Because of these issues being found and corrected, OpenSSL\u2019s new PRNG\u00a0 is safer, performs better, and will provide safer crypto to the world!<\/p>\n<hr \/>\n<h2>Issues Identified in OpenSSLs New PRNG:<\/h2>\n<ul>\n<li><strong>Issue 1: Insufficient Privileges Check<\/strong><br \/>\nThe OpenSSL PRNG checks privileges before allowing random bytes to be called. This check did not account for any future changes to the structure of privileges in Linux, specifically, POSIX privileges in Fedora and its downstream neighbors.<\/li>\n<\/ul>\n<p>Status: Issue reported and patch issued here:<a href=\"https:\/\/github.com\/openssl\/openssl\/pull\/6993\">\u00a0https:\/\/github.com\/openssl\/openssl\/pull\/6993<\/a><\/p>\n<ul>\n<li><strong>Issue 2: Entropy Bytes Discarded<\/strong><br \/>\nThe OpenSSL PRNG was structured in such a way that it frequently threw away bytes if the function called too many or too few bytes of random data, leading to sub-optimal performance.<\/li>\n<\/ul>\n<p>Status: Issue reported and patches issued here:\u00a0<a href=\"https:\/\/github.com\/openssl\/openssl\/issues\/6978\">https:\/\/github.com\/openssl\/openssl\/issues\/6978\u00a0<\/a>and here\u00a0<a href=\"https:\/\/github.com\/openssl\/openssl\/pull\/6990\">https:\/\/github.com\/openssl\/openssl\/pull\/6990<\/a><\/p>\n<ul>\n<li><strong>Issue 3: Insufficient Size Comparison<\/strong><br \/>\nThe OpenSSL PRNG function ctr_128 checked if exactly 128 bits of keylength were in use, instead of greater than 128 bits of keylength.<\/li>\n<\/ul>\n<p>The OpenSSL security team responded that these checks are sufficient in the context that they are used, because if the keylength doesn\u2019t match the behavior of the software changes in a safe way, regardless of the keylength being larger or smaller than intended.<\/p>\n<ul>\n<li><strong>Issue 4: Missing Null Pointer Checks in API Functions<\/strong><br \/>\nThe API for some PRNG functions fails to check for null pointers.<\/li>\n<\/ul>\n<p>The OpenSSL security team responded that these checks are omitted by design. There is significant debate within the OpenSSL community on whether OpenSSL should employ null pointer checks or not. The full response by Matt Caswell of OpenSSL is below:<\/p>\n<blockquote><p>Passing NULL through in certain parameters is disallowed by the API. If you do it then you are incorrectly using the API &#8211; and the behavior is undefined.<\/p><\/blockquote>\n<blockquote><p>Similarly if you pass NULL through to certain C library functions then you might see a crash.<\/p><\/blockquote>\n<blockquote><p>It&#8217;s an ongoing debate within the OpenSSL community as to whether we should add NULL pointer checks or not. The big advantage to not having these checks (as per the argument of those in favour of not having them) is that you get immediate feedback that you&#8217;ve got a bug in your code, rather than potentially attempting to carry on even through an earlier operation failed. There is of course an overhead involved continually checking for NULL pointers through the whole library. Others take the opposite view that we should never allow a crash in the library if we can avoid it.<\/p><\/blockquote>\n<blockquote><p>The Debate continues with no clear consensus at the current time.<\/p><\/blockquote>\n<blockquote><p>In any case not having NULL checks in the specific locations identified was a deliberate choice. No changes were made a result of this issue.<\/p><\/blockquote>\n<ul>\n<li><strong>Issue 5: Ordering of Seed Sources<\/strong><br \/>\nThe Linux getrandom() function is prioritized over all others, even if other sources of entropy are specified. It is recommended that OpenSSL mixes entropy sources if others are specified through XOR or some other mixing function.<\/li>\n<\/ul>\n<p>The OpenSSL team has requested that their exact response be shown here for clarity:<\/p>\n<blockquote><p><span class=\"im\">For performance reasons, and also in order not to hog a scarce system resource (see e.g. issue #5849), we should not collect more than the requested amount of entropy and return as soon as we succeeded. Also, XORing the random data of different sources would not be necessary, because we use a derivation function: Concatenating the data is <\/span>sufficient, it will be mixed by the derivation function in the end. Note that if getrandom() fails for some reason then the other entropy sources will be used as fallbacks.<\/p><\/blockquote>\n<ul>\n<li><strong>Issue 6: Support for NONE Entropy Source<\/strong><br \/>\nOpenSSL can be compiled with NONE as an entropy option. It is suggested that a warning be issued when a user attempts to do this as it is far less secure.<\/li>\n<\/ul>\n<p>Status: Issue reported and patch issued here:\u00a0<a href=\"https:\/\/github.com\/openssl\/openssl\/issues\/6980\">https:\/\/github.com\/openssl\/openssl\/issues\/6980<\/a>and\u00a0<a href=\"https:\/\/github.com\/openssl\/openssl\/pull\/6981\">https:\/\/github.com\/openssl\/openssl\/pull\/6981<\/a><\/p>\n<p>The OpenSSL team has requested that their exact response be shown here for clarity:<\/p>\n<blockquote><p>This option -with-rand-seed=none is only meant as last resort in cases where OpenSSL does not know which entropy source to use. Note, however, that it does *not* relax the requirement for seeding the DRBG properly, it only disables *automatic* (re-)seeding. The DRBG will remain in an uninitialized state unless the application seeds it manually using RAND_add(). Provided that the application seeds (and reseeds) the DRBG manually with sufficient entropy from a reliable entropy source, this should be just as good as automatic reseeding.<\/p><\/blockquote>\n<blockquote><p>The -with-rand-seed option and the manual reseeding process is documented in detail in the RAND_DRBG(7) manual page.<\/p><\/blockquote>\n<ul>\n<li><strong>Issue 7: Role of Additional Data<\/strong><br \/>\nOpenSSL allows optional personalization data to be added to the PRNG. This data is low-entropy and will not help security in any scenario.<\/li>\n<\/ul>\n<p>The OpenSSL team disagreed with our analysis. The full response by Matt Caswell of OpenSSL is below:<\/p>\n<blockquote><p>This is a requirement of SP800-90A. The idea is to differentiate the output from different instantiations of the DRBG. See section 8.7.1 of that document for more details.<\/p><\/blockquote>\n<ul>\n<li><strong>Issue 8: UEFI Randomness Generation<\/strong><br \/>\nUEFI and VXWorks only support the \u201cnone\u201d option for generating random data in OpenSSL. This is far less secure than other options. It is suggested that the OpenSSL team look into options like EFI_RNG_PROTOCOL or just rdrand. Both options are superior to using \u201cnone\u201d as an entropy source.<\/li>\n<\/ul>\n<p>The OpenSSL team wanted to contact the UEFI team to expand on this issue. As of this writing no changes have been made to our knowledge. We are waiting for additional comment from the OpenSSL Security Team on this issue.<\/p>\n<ul>\n<li><strong>Issue 9: Modern Windows Randomness Generation<\/strong><br \/>\nOlder versions of Windows used an old entropy source called CryptGenRandom(). This was replaced in Windows XP and above by RtlGenRandom() which is a more modern and better source of entropy.<\/li>\n<\/ul>\n<p>The team agreed that this may be a good change. As of this writing no changes have been made.<\/p>\n<ul>\n<li><strong>Issue 10: Confusing Terminology in Documentation<\/strong><br \/>\nOpenSSL comments and documentation use the words \u201centropy\u201d and \u201centropy length\u201d in non-standard ways, which can lead to confusion among developers trying to review and\/or implement OpenSSL-based code.<\/li>\n<\/ul>\n<p>The OpenSSL team said that the use of the words are in compliance with NISTs definition. The concern is that the NIST definition may be confusing to developers and lead to implementation errors for devs using OpenSSL as a library for their software.<\/p>\n<p>The full report is below, please do not hot link to this report. Linking to this page instead allows us to bring more awareness to our cause! Thank you!<\/p>\n<p><a href=\"https:\/\/ostif.org\/wp-content\/uploads\/2018\/09\/opensslrng-audit-report.pdf\">https:\/\/ostif.org\/wp-content\/uploads\/2018\/09\/opensslrng-audit-report.pdf<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>We have completed the security review of the new\u00a0Pseudorandom Number Generator (PRNG)\u00a0for\u00a0OpenSSL1.1.1. This security review was sponsored by\u00a0Private Internet Access,\u00a0ExpressVPN,\u00a0DuckDuckGo,\u00a0OpenVPN, and the privacy community. Random number generation is a crucial component in all cryptography, because the \u201crandomness\u201d of numbers is the mechanism that makes secret numbers hard to guess. Problems with number generation can lead [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":1720,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[69,64],"tags":[14,25,47,18,39],"_links":{"self":[{"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/posts\/1533"}],"collection":[{"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/comments?post=1533"}],"version-history":[{"count":18,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/posts\/1533\/revisions"}],"predecessor-version":[{"id":1952,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/posts\/1533\/revisions\/1952"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/media\/1720"}],"wp:attachment":[{"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/media?parent=1533"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/categories?post=1533"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/ostif.org\/wp-json\/wp\/v2\/tags?post=1533"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}